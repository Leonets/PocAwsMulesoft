<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:tracing="http://www.mulesoft.org/schema/mule/tracing" xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:sns="http://www.mulesoft.org/schema/mule/sns" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:sqs="http://www.mulesoft.org/schema/mule/sqs" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:apikit="http://www.mulesoft.org/schema/mule/mule-apikit" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd http://www.mulesoft.org/schema/mule/mule-apikit http://www.mulesoft.org/schema/mule/mule-apikit/current/mule-apikit.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd 
http://www.mulesoft.org/schema/mule/sqs http://www.mulesoft.org/schema/mule/sqs/current/mule-sqs.xsd
http://www.mulesoft.org/schema/mule/sns http://www.mulesoft.org/schema/mule/sns/current/mule-sns.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/tracing http://www.mulesoft.org/schema/mule/tracing/current/mule-tracing.xsd">
    <http:listener-config name="gucciDemoHttpListenerConfig">
        <http:listener-connection host="0.0.0.0" port="9000" />
    </http:listener-config>
    <apikit:config name="gucciDemoConfig" api="guccidemo.raml" outboundHeadersMapName="outboundHeaders" httpStatusVarName="httpStatus" />
	<flow name="guccidemo-main">
        <http:listener config-ref="gucciDemoHttpListenerConfig" path="/api/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body><![CDATA[#[payload]]]></http:body>
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:error-response>
        </http:listener>
		<apikit:router config-ref="gucciDemoConfig" />
        <error-handler>
            <on-error-propagate type="APIKIT:BAD_REQUEST">
                <ee:transform>
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Bad request"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">400</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform>
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:METHOD_NOT_ALLOWED">
                <ee:transform>
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Method not allowed"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">405</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_ACCEPTABLE">
                <ee:transform>
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not acceptable"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">406</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:UNSUPPORTED_MEDIA_TYPE">
                <ee:transform>
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Unsupported media type"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">415</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
            <on-error-propagate type="APIKIT:NOT_IMPLEMENTED">
                <ee:transform>
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Not Implemented"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">501</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
    <flow name="gucci-demo-flow" doc:id="0b637abb-3e46-4257-b25d-2f118b239a5a" >
		<scheduler doc:name="Scheduler" doc:id="1bf0b0d3-1089-4ba9-8e3d-7e400d231639" >
			<scheduling-strategy >
				<fixed-frequency frequency="10000" timeUnit="DAYS"/>
			</scheduling-strategy>
		</scheduler>
		<s3:create-bucket doc:name="Create Bucket" doc:id="d409ffb0-0c1e-4edd-94cf-def924001d3c" bucketName="guccidemo" config-ref="Amazon_S3_Configuration" />
	</flow>
	<flow name="guccidemo-console">
        <http:listener config-ref="gucciDemoHttpListenerConfig" path="/console/*">
            <http:response statusCode="#[vars.httpStatus default 200]">
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:response>
            <http:error-response statusCode="#[vars.httpStatus default 500]">
                <http:body><![CDATA[#[payload]]]></http:body>
                <http:headers><![CDATA[#[vars.outboundHeaders default {}]]]></http:headers>
            </http:error-response>
        </http:listener>
        <apikit:console config-ref="gucciDemoConfig" />
        <error-handler>
            <on-error-propagate type="APIKIT:NOT_FOUND">
                <ee:transform>
                    <ee:message>
                        <ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{message: "Resource not found"}]]></ee:set-payload>
                    </ee:message>
                    <ee:variables>
                        <ee:set-variable variableName="httpStatus">404</ee:set-variable>
                    </ee:variables>
                </ee:transform>
            </on-error-propagate>
        </error-handler>
    </flow>
	<flow name="check-environment" doc:id="ac9c1d47-80d8-4c45-af20-f14cbfbf5c2c">
		<http:listener doc:name="Listener for Check Environment (/check)" doc:id="d290be0a-5304-4dc8-b4c4-2d358d30445c" config-ref="gucciDemoHttpListenerConfig" path="/check" />
		<logger level="INFO" doc:name="Logger Check" doc:id="dbcec532-e682-4e89-9095-2c6203fb89cd" message="#['Check this' ++ payload]" />
		<sqs:list-queues doc:name="List queues" doc:id="7bdbe5c3-96b8-4c28-a592-f2907f616cce" config-ref="Amazon_SQS_Configuration" />
		<logger level="INFO" doc:name="Logger Payload" doc:id="3e6a40a7-e1d3-4f38-a41d-508901d2545f" message="#[%dw 2.0&#10;output application/json&#10;---&#10;payload]" />
		<sqs:get-approximate-number-of-messages doc:name="Get approximate number of messages" doc:id="0c277991-40cf-4aa7-a5a1-78792a43237e" config-ref="Amazon_SQS_Configuration" queueUrl="${queue.order.url}"/>
		<logger level="INFO" doc:name="Logger Payload" doc:id="e1e2be61-8756-453f-8c10-106be0d87a3f" message="#[%dw 2.0&#10;output application/json&#10;---&#10;payload]" />
		<sns:list-topics doc:name="List topics" doc:id="0a351f38-0642-461e-b1bb-2cb2470ae56f" config-ref="Amazon_SNS_configuration" />
		<logger level="INFO" doc:name="Logger Topics" doc:id="c57065c3-942b-47c4-b94d-07f79a2d3a8d" message="#[payload]" />
		<s3:list-objects doc:name="List Objects" doc:id="2219fc4e-2d97-4616-ae64-f983848e1dff" config-ref="Amazon_S3_Configuration" bucketName="guccidemo" />
		<logger level="INFO" doc:name="Logger Saved Objects" doc:id="44738ac5-a2ae-41cb-be2a-ab4d192a097e" message="#[payload]" />
		<set-payload value="Check executed" doc:name="Set Payload" doc:id="d879f77e-ce4b-42e9-a63a-020d0579e6f4" />
		<logger level="INFO" message="#[payload]" />
	</flow>
	<flow name="get:\shipping:gucciDemoConfig">
		<logger level="INFO" message="#[payload]" doc:name="Logger Payload"/>
    </flow>
    <flow name="get:\shipping\(country):gucciDemoConfig">
        <s3:list-objects doc:name="List Objects" doc:id="26731329-e07a-4a79-b708-101ae83e214f" config-ref="Amazon_S3_Configuration" bucketName="guccidemo" />
		<set-variable value="#[[]]" doc:name="Set Variable amountListByCountry" doc:id="d536e328-a6a6-4807-b350-f610f75cf407" variableName="amountListByCountry" />
		<foreach doc:name="For Each" doc:id="83d9f1e0-ed88-4cf9-a1a6-19de3daf6c4c" collection="#[payload]">
			<s3:get-object doc:name="Get Object" doc:id="3325ce8d-e2f9-4e13-9748-8d16a8e1bf29" config-ref="Amazon_S3_Configuration" bucketName="guccidemo" key="#[payload.key]" />
			<ee:transform doc:name="Transform Message" doc:id="d3c86bef-7d0b-4dfd-b3d0-0a434794ce01">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
read(payload,"application/json")]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			<set-variable value="#[%dw 2.0&#10;output application/java&#10;---&#10;vars.amountListByCountry + payload]" doc:name="Set Variable" doc:id="ba6e2fc1-54ae-4ed9-be5f-ab7bb2d090e6" variableName="amountListByCountry" />
		</foreach>
		<ee:transform doc:name="Transform Message" doc:id="3a41f031-9b7a-4634-be36-aa1df8d9e543">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
vars.amountListByCountry groupBy (item) -> item.destinationCountry
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<set-payload value="#[payload]" doc:name="Set Payload" doc:id="9079ec85-f504-4ac8-b4d3-f5f07cdb0ea1" />
		<logger level="INFO" doc:name="Logger" doc:id="8e9064d8-b0cb-459f-8ffe-6c839e50c87a" message="#[payload]" />
		<logger level="INFO" message="get:\shipping\(country):guccidemo-config" />
    </flow>
    <flow name="post:\orders:application\json:gucciDemoConfig">
		<tracing:set-logging-variable doc:name="Set logging variable for Orders" doc:id="1439c7b0-14a2-4daa-b7e5-3237dc77602d" variableName="orders" value="#['Order' ++ randomInt(1000) as String {format: &quot;#&quot;}]"/>
		<foreach doc:name="For Each" doc:id="bf18632b-c915-463f-b3e3-9f74c9c69e49" collection="#[payload.ordersList]">
			<scatter-gather doc:name="Scatter-Gather" doc:id="2ababcc3-ba2b-4ca4-9c84-6f0b69764c28" >
				<route >
					<logger level="INFO" doc:name="Save Order to S3" doc:id="9d94038d-3618-4913-bdcf-4ddecab91b57" message="#[payload]" />
					<s3:put-object doc:name="Put Object" doc:id="6e22358e-68c2-46ed-9f82-b699146cec4a" config-ref="Amazon_S3_Configuration" bucketName="guccidemo" key='#[payload.item ++ randomInt(1000) as String {format: "#"}]' />
					<logger level="INFO" doc:name="Logger After Put" doc:id="28d10728-8beb-43da-a21d-3f04da98f4f7" message="#['After Put Object']" />
				</route>
				<route >
					<logger level="INFO" doc:name="Logger Before Send" doc:id="f5b737fa-f4db-4eb1-9804-ca8b45666b32" message="#[payload]" />
					<ee:transform doc:name="Transform in a SQS Message" doc:id="9b157567-7535-4667-9e84-045daf21d9fa" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	delaySeconds: 0,
	body: (write(payload,'application/json'))
} as Object {
	class: "org.mule.extension.sqs.api.model.Message"
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<sqs:send-message doc:name="Send message to Marketing Queue" doc:id="8124cbb6-8d6f-4b93-b71b-398d70b8d6a1" config-ref="Amazon_SQS_Configuration" queueUrl="${queue.marketing.url}" />
					<logger level="INFO" doc:name="Logger After Send" doc:id="64af5de6-a326-4ff8-bbd9-acc88031274a" message="#[payload]" />
				</route>
				<route >
					<logger level="INFO" doc:name="Logger payload before Publish" doc:id="1c369bc4-4378-4511-b153-113810cf2413" message="#[payload]" />
					<logger level="INFO" doc:name="Logger before Publish" doc:id="3ee219d4-2460-4553-9e39-a8c2fc8cc9b1" message="Logger before Publish" />
					<sns:publish doc:name="Publish to Topic" doc:id="3c77097c-bfef-40ad-9b08-6bc6085e9b6e" config-ref="Amazon_SNS_configuration" topicArn="${topic.urn}">
									<sns:message><![CDATA[#[write(payload,'application/json')]]]></sns:message>
								</sns:publish>
					<logger level="INFO" message="Logger after Publish" doc:name="Logger after Publish" />
				</route>
			</scatter-gather>
		</foreach>
    </flow>
	<flow name="receive-marketing-messages" doc:id="801f52cd-2335-4b4e-893a-366a788671ef" >
		<sqs:receivemessages doc:name="Receive messages from Marketing Queue" doc:id="cfa928dc-05ef-4e80-9c57-79185e521bad" config-ref="Amazon_SQS_Configuration" queueUrl="${queue.marketing.url}" preserveMessages="true" visibilityTimeout="${queue.visibility.timeout}" frequency="${queue.frequency}">
			<reconnect frequency="60000" />
		</sqs:receivemessages>
				<set-variable value='#[attributes."sqs.message.receipt.handle"]' doc:name="Set ReceiptHandle Variable" doc:id="2b83db47-32ed-4ff1-a90b-bdd1333b3f77" variableName="ReceiptHandle"/>
				<ee:transform doc:name="Transform in a SQS Message" doc:id="a4ee4e94-a08f-450e-8f54-e6dc253153f8" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger Before Deciding Price Changes" doc:id="14989a8e-73e9-4b9e-94ef-8ed694914a5b" message="Logger Before Deciding Price Changes" />
		<logger level="INFO" doc:name="Logger Before Decide Price Changes" doc:id="f3d0abc8-5b1c-4c30-9891-c7570279d5c6" message="#[payload]" />
		<choice doc:name="Choice" doc:id="199b45c3-1944-43d1-89fa-968048a3abbb">
			<when doc:id="7c87f7cb-9fca-4cbd-8bd6-47c42d5926b2" expression="#[read(payload,'application/json').price&gt;800]">
					<logger level="INFO" doc:name="Logger Before Decide Price Changes" doc:id="fea15c73-0d26-4014-8281-9ceca02f960c" message="#[payload]" />
					<ee:transform doc:name="Transform in a SQS Message" doc:id="78573171-d9bf-4fa1-871b-01f7ff7d6740">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/java
---
{
	delaySeconds: 0,
	body: (write(payload,'application/json'))
} as Object {
	class: "org.mule.extension.sqs.api.model.Message"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
					<sqs:send-message doc:name="Send message to Pricing Policy Queue" doc:id="c3a4a0aa-8cb7-4d23-9831-02066d371cbd" config-ref="Amazon_SQS_Configuration" queueUrl="${queue.pricing-policy.url}" />
					<logger level="INFO" doc:name="Logger ReceiptHandle to be deleted" doc:id="89d32cd8-fe01-4221-b7df-c1bc5800c293" message="#[vars.ReceiptHandle]" />
				<sqs:delete-message doc:name="Delete message" doc:id="9a58e796-6b32-4526-9676-7af3fb6f9c12" config-ref="Amazon_SQS_Configuration" receiptHandle="#[vars.ReceiptHandle]"/>
				</when>
				<otherwise>
					<sqs:delete-message doc:name="Delete message" doc:id="018571fd-b6a2-437e-8f64-c2f720a354ab" config-ref="Amazon_SQS_Configuration" receiptHandle="#[vars.ReceiptHandle]" />
				</otherwise>
		</choice>
		<logger level="INFO" doc:name="Log payload received from Pricing Policy Queue" doc:id="8d54411a-12c3-453d-abce-557da428cc64" message="#[payload]" />
	</flow>
	
	<flow name="receive-order-messages" doc:id="8890afe4-1ba2-4236-86ae-cc552eab470c" >
		<sqs:receivemessages doc:name="Receive messages from Order Queue" doc:id="9e6330e1-818e-4f8c-993a-9591867b39ff" config-ref="Amazon_SQS_Configuration" queueUrl="${queue.order.url}" visibilityTimeout="${queue.visibility.timeout}" frequency="${queue.frequency}">
			<reconnect frequency="20000" />
		</sqs:receivemessages>
		<set-variable value='#[attributes."sqs.message.receipt.handle"]' doc:name="Set ReceiptHandle Variable" doc:id="44049f00-557f-47cd-8c92-94dd94bf5bd2" variableName="ReceiptHandle" />
		<logger level="INFO" doc:name="Log payload received from Order Queue" doc:id="dc27f083-9a9a-4887-885f-1e4aacf45ef8" message="#[payload]" />
		<sqs:delete-message doc:name="Delete message" doc:id="dd4dba42-0615-4016-97c7-e89ed16f024e" config-ref="Amazon_SQS_Configuration" receiptHandle="#[vars.ReceiptHandle]" />
		<http:request method="GET" doc:name="Forward to Order External System" doc:id="7bd656c8-550c-49e5-95d7-3c7d2368c0e2" config-ref="MOCK_HTTP_Request_configuration" path="Order" />
	</flow>
	<flow name="receive-accounting-messages" doc:id="b782228e-1e2d-42dd-9acb-7fc35a5d865c" >
		<sqs:receivemessages doc:name="Receive messages from Accounting Queue" doc:id="5a35e1f2-49f7-4c70-a8db-8bf40223f1fa" config-ref="Amazon_SQS_Configuration" visibilityTimeout="${queue.visibility.timeout}" queueUrl="${queue.accounting.url}" frequency="${queue.frequency}" >
			<reconnect frequency="20000" />
		</sqs:receivemessages>
		<set-variable value='#[attributes."sqs.message.receipt.handle"]' doc:name="Set ReceiptHandle Variable" doc:id="5a65d2ff-e9c4-4cc3-86e0-bae7aad8aa59" variableName="ReceiptHandle" />
		<logger level="INFO" doc:name="Log payload received from Accounting Queue" doc:id="8800e602-45a7-4e9b-99c0-b3becf984e8a" message="#[payload]" />
		<sqs:delete-message doc:name="Delete message" doc:id="90206548-2358-4adb-aeab-3f94a132904f" config-ref="Amazon_SQS_Configuration" receiptHandle="#[vars.ReceiptHandle]" />
		<http:request method="GET" doc:name="Forward to Accounting External System" doc:id="5e151ad4-62a7-4940-a13d-b1ac0beb2eee" config-ref="MOCK_HTTP_Request_configuration" path="Accounting"/>
	</flow>
	<flow name="receive-shipping-messages" doc:id="1de1b66d-c508-4fab-8840-f431f18b86cb" >
		<sqs:receivemessages doc:name="Receive messages from Shipping Queue" doc:id="feecd7ec-402c-4fba-b71e-1fba5af51afe" config-ref="Amazon_SQS_Configuration" visibilityTimeout="${queue.visibility.timeout}" queueUrl="${queue.shipping.url}" frequency="${queue.frequency}" >
			<reconnect frequency="20000" />
		</sqs:receivemessages>
		<set-variable value='#[attributes."sqs.message.receipt.handle"]' doc:name="Set ReceiptHandle Variable" doc:id="e640ec89-2220-4981-90f3-61875806ecfc" variableName="ReceiptHandle" />
		<logger level="INFO" doc:name="Log payload received from Shipping Queue" doc:id="5c337f2a-a56d-4482-815d-c95543d58991" message="#[payload]" />
		<sqs:delete-message doc:name="Delete Message" doc:id="93207208-c7ae-46bc-8692-d5cb8c08432a" config-ref="Amazon_SQS_Configuration" receiptHandle="#[vars.ReceiptHandle]" />
		<http:request method="GET" doc:name="Forward to Shipping External System" doc:id="a51f655e-1f52-4425-9c89-6b5e73562068" config-ref="MOCK_HTTP_Request_configuration" path="Shipping" />
	</flow>		
</mule>
